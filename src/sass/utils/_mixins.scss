/// Breakpoints in a easy way
/// @access public
/// @param {String} $class - apply a media query between: xs, sm, md and lg
@mixin breakpoint($class) {
  @if      $class == xs { @media (max-width: rem(500))  { @content; } }
  @else if $class == sm { @media (max-width: rem(768))  { @content; } }
  @else if $class == md { @media (max-width: rem(992))  { @content; } }
  @else if $class == lg { @media (max-width: rem(1240)) { @content; } }
  @else { @warn "Breakpoint mixin supports: xs, sm, md, lg"; }
}

/// Padding in rem with shorthand or long syntax
/// @access public
/// @param {List} $paddings - values to be converted
/// @param {Boolean} $shorthand [true] - shorthand or long syntax
/// @return {Padding}
@mixin pad($paddings, $shorthand: true) {
  $orientations: top right bottom left;

  @if $shorthand {
    @each $value in $paddings {
      $paddings: set-nth($paddings, index($paddings, $value), rem($value));
    }
    padding: $paddings;
  } @else {
    @for $i from 1 through length($paddings) {
      @if nth($paddings, $i) != 'x' {
        padding-#{nth($orientations, $i)}: rem(nth($paddings, $i));
      }
    }
  }
}

/// Replacement to '-9999px' hacking to hide text
/// @access public
@mixin hide_text() {
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
}

/// Generate a clearfix
/// @access public
@mixin clearfix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }

  &:after {
    clear: both;
  }
}

/// Add properties to the common events (active, focus and hover)
/// @access public
/// @param {Boolean} $self [false] - affects or not the element and its events
@mixin on-event($self: false) {
  @if $self {
    &,
    &:active,
    &:focus,
    &:hover {
      @content;
    }
  } @else {
    &:active,
    &:focus,
    &:hover {
      @content;
    }
  }
}
